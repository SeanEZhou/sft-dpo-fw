{"prefix": "def get_markdown(text):     if not text:         return \"\"      pattern = fr'([\\[\\s\\S\\]]*?)\\(([\\s\\S]*?):([\\[\\s\\S\\]]*?)\\)'     # Regex check     if re.match(pattern, text):         # get get value of group regex"}
{"prefix": "class NbconvertFileHandler(IPythonHandler):      SUPPORTED_METHODS = ('GET',)      @web.authenticated     def get(self, format, path):  def get(self, format, path): class NbconvertPostHandler(IPythonHandler):     SUPPORTED_METHODS = ('POST',)      @web"}
{"prefix": "def key(request, wikiname=None, itemname=None, attachname=None, content=None, se     return key   def put(request, key, data,         filename=None,         content_type=None, def _do_remove(request, key):     remove(request, key)   def _do(request, do, key"}
{"prefix": "async def message(self, ctx: commands.Context):      @message.command(name=\"mention\")     @commands.guild_only()     async def with_mention(self, ctx: commands.Context, message: str = None):         \"\"\"Set stream alert message when mentions are enabled.          Use `{mention}` in the message to insert"}
{"prefix": "import sys import datetime from functools import wraps from werkzeug.utils import secure_filename from werkzeug.security import generate_password_hash, check_password_hash from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, session, send_file, make_response from flask_login import login_user, login_required, logout"}
{"prefix": "from apkleaks.colors import clr from contextlib import closing from distutils.spawn import find_executable from pyaxmlparser import APK from urllib.request import urlopen from zipfile import ZipFile def decompile(self): \t\t\t\t\tclasses.write(zipped.read(\"classes.dex\")) \t\t\texcept Exception as e: \t\t\t\tsys.exit(self"}
{"prefix": "def visit_Call(self, node):         datetime().         \"\"\"         if isinstance(node.func, ast.Name):             expr = None             if node.func.id == 'ObjectId':                 expr = \"('\" + node.args[0].s + \"')\"             elif node.func.id == 'datetime':                 values = []                 for"}
{"prefix": "import ctypes import logging import libarchive  from diffoscope.tempfiles import get_temporary_directory  def close_archive(self):      def get_member_names(self):         self.ensure_unpacked()         return self._member_names      def extract(self, member_name, dest_dir):         self.ensure_unpacked()         return os.path"}
{"prefix": "import os  from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter from fastapi.responses import FileResponse  statics_router = APIRouter()   @statics_router.get('/static-files/{path:path}/') async def serve_static_files(path):     from aim import web     static_file_name"}
{"prefix": "def get_int_arg(value, default=0):             num_dag_to=min(end, num_of_all_dags),             num_of_all_dags=num_of_all_dags,             paging=wwwutils.generate_pages(current_page, num_of_pages,                                            search=arg_search_query,                                            showPaused=not hide_pa"}
{"prefix": "import re import inspect  __version__ = '0.8' __author__ = 'Hsiaoming Yang <me@lepture.com>' __all__ = [     'BlockGrammar', 'BlockLexer', def _pure_pattern(regex):   def _keyify(key):     return _key_pattern"}
{"prefix": "async def get_resolved_ref(self):             self.sha1_validate(self.unresolved_ref)         except ValueError:             # The ref is a head/tag and we resolve it using `git ls-remote`             command = [\"git\", \"ls-remote\", self.repo, self.unresolved_ref]             result = subprocess"}
{"prefix": "def before_upstream_connection(                 raise ProxyAuthenticationFailed()             parts = request.headers[b'proxy-authorization'][1].split()             if len(parts) != 2 \\                     and parts[0].lower() != b'basic' \\                     and parts[1] != self.flags.auth_code:                 raise"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)    # If both inner_shape and ragged"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)    # If both inner_shape and ragged"}
{"prefix": "def word_tokenize(self, s):         return self._word_tokenizer_re().findall(s)      _period_context_fmt = r\"\"\"         \\S*                          # some word material         %(SentEndChars)s             # a potential sentence ending         (?=(?P<after_tok>             %(NonWord)s             "}
{"prefix": "def copy_with(self, **kwargs: typing.Any) -> \"URL\":         #  \\_/   \\______________/\\_________/ \\_________/ \\__/         #   |           |            |            |        |         # scheme     authority       path        query   fragment         return URL(self._uri_reference.copy_with"}
{"prefix": "def makecmdoptions(self):     def __str__(self):         return \"<SvnAuth username=%s ...>\" %(self.username,)  rex_blame = re.compile(r'\\s*(\\d+)\\s*(\\S+) (.*)')  class SvnWCCommandPath(common.PathBase):     \"\"\" path"}
{"prefix": "'transparent': (0, 0, 0, 0), }  RGBA = re.compile(r'rgba\\([ \\n\\r\\t]*(.+?)[ \\n\\r\\t]*\\)') RGB = re.compile(r'rgb\\([ \\n\\r\\t]*(.+?)[ \\n\\r\\t]*"}
{"prefix": "import typing  import flask  app = flask.Flask(\"xmpp-http-upload\") app.config.from_envvar(\"XMPP_HTTP_UPLOAD_CONFIG\")     CORS(app)   def sanitized_join(path: str, root: pathlib.Path) -> pathlib.Path:     result = (root / path).absolute()     if not str"}
{"prefix": "def __str__(self):   class Application:     SOCKTYPES = {         \"tcp\": socket.SOCK_STREAM,         \"udp\": socket.SOCK_DGRAM, def __call__(self, env, start_response):             try:                 length = int(env[\"CONTENT_LENGTH\"])             except AttributeError:                 length = -1            "}
{"prefix": "def branch_exists(self, branch):         \"\"\"         try:             heads = subprocess.run(                 [\"git\", \"ls-remote\", \"--heads\", self.git_url],                 capture_output=True,                 text=True,                 check=True             )             tags = subprocess.run(                 [\"git\", \"ls-remote\", \"--"}
{"prefix": "def _unzip_iter(filename, root, verbose=True):         yield ErrorMessage(filename, e)         return      # Get lists of directories & files     namelist = zf.namelist()     dirlist = set()     for x in namelist:         if x.endswith('/'):             dirlist.add(x)        "}
{"prefix": "import mimetypes import os import os.path import re import socketserver import threading def condition():         if path == \"/js/livereload.js\":             file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"livereload.js\")         elif path.startswith(self.mount_path):             rel_file_path"}
{"prefix": "def parse_native_url(url):         result = re.match(             r'^https?://maker\\.ifttt\\.com/use/'             r'(?P<webhook_id>[A-Z0-9_-]+)'             r'/?(?P<events>([A-Z0-9_-]+/?)+)?"}
{"prefix": "def interpret(): @app.route(\"/file/<path:path>\", methods=[\"GET\"]) @login_check def file(path):     path = secure_filename(path)     if app.interface.encrypt and isinstance(app.interface.examples, str) and path.startswith(app.interface.examples):         with open(os.path.join(app.cwd, path), \"rb\")"}
{"prefix": "import os import re from collections import defaultdict  from flask import (     Response, def _add_additional_assets(hook): def login():     from flask_login import current_user      redirect_url = request.args.get(\"redirect\", request.script_root + url_for(\"index\"))     permissions = sorted(         filter(             lambda x"}
{"prefix": "import os import Bcfg2.Server.Plugin   def async_run(prog, args):     pid = os.fork()     if pid:         os.waitpid(pid, 0)     else:         dpid = os.fork()         if not dpid:             os.system(\" \".join([prog] + args"}
{"prefix": "class AffinityFilter(filters.BaseHostFilter):     def __init__(self):         self.compute_api = compute.API()      def _affinity_host(self, context, instance_id):         return self.compute_api.get(context, instance_id)['host']   class DifferentHostFilter(AffinityFilter): def host_passes"}
{"prefix": "from django.conf import settings from django.contrib import messages from django.contrib.auth import REDIRECT_FIELD_NAME from django.utils.translation import ugettext as _ from keystoneclient import exceptions as keystone_exceptions  def handle(self, request, data):         request.session['region_endpoint'] = endpoint         request.session['region_name'] ="}
{"prefix": "def configure():     register_cli_str('pydev-debug-host', default=None)     register_cli_int('pydev-debug-port', default=None)      register_str('admin_token', default='ADMIN')     register_str('bind_host', default='0.0.0.0')     register_int('compute_port',"}
{"prefix": "def nav_path(request):     path_parts.append(part)     is_last = len(path_parts) == len(request.path_parts)      item = _item(name=part, href=None)      if not is_last or (is_dir and request.view_func is not view_directory):       item.href = request.get_url(view_func"}
{"prefix": "def _checkPolkitPrivilege(self, sender, conn, privilege):             # bus, and it does not make sense to restrict operations here             return          info = SenderInfo(sender, conn)          # get peer PID         pid = info.connectionPid()          # query PolicyKit         self._initPolkit()"}
{"prefix": "def encode(self):  def constructObject(data):     try:         classBase = eval(data[\"\"] + \".\" + data[\"\"].title())     except NameError:         logger.error(\"Don't know how to handle message type: \\\"%s\\\"\", data[\"\"])         return None     try:         returnObj = class"}
{"prefix": "def sendEmail(sydent, templateName, mailTo, substitutions):             allSubstitutions[k+\"_forhtml\"] = cgi.escape(v.decode('utf8'))             allSubstitutions[k+\"_forurl\"] = urllib.quote(v)          mailString = open(mailTemplateFile).read() % allSubstitutions         raw"}
{"prefix": "def get_link_re() -> str:      # [text](url) or [text](<url>) or [text](url \"title\")     LINK_RE = NOIMG + BRK + \\         r'''\\(\\s*(<.*?>|((?:(?:\\(.*?\\))|[^\\(\\)]"}
{"prefix": "import subprocess import syslog from jadi import component, service, interface  import aj from aj.api.http import BaseHttpHandler class OSAuthenticationProvider(AuthenticationProvider):      def authenticate(self, username, password):         child = None         try:             child = pexpect.spawn('/bin/sh', ['-c', '/bin/s"}
{"prefix": "from app import apfell, links, use_ssl from sanic import response from jinja2 import Environment, PackageLoader from sanic_jwt.decorators import scoped, inject_user from app.routes.routes import respect_pivot import urllib.parse  env = Environment(loader=PackageLoader('app', 'templates'))  async def apiui"}
{"prefix": "def pref_get(key):         return \"Authentication required\", 401      if key in get_preferences():         return Response(json.dumps({'key': key, 'value': get_preferences()[key]}))     else:         return Response(json.dumps({'key': key, 'error': 'novalue'}))   @"}
{"prefix": "def rreplace(s, old, new, occurrence):      p = Process(config_section)      PASTES_FOLDER = os.path.join(os.environ['AIL_HOME'], p.config.get(\"Directories\", \"pastes\"))     PASTES_FOLDERS = PASTES_FOLDER + '/'      # LOGGING #     publisher"}
{"prefix": "async def ip(ctx , *, argument):  @Client.command() async def dirsearch(ctx , *, argument):     Path = TOOLS['dirsearch']; MainPath = getcwd(); chdir(Path)     await ctx.send(f\"**Running Your Dirsearch Scan, We Will Send The Results When It's Done**"}
{"prefix": "def load():     database_name = f\"{autocomplete_filepath}{os.path.sep}{RTXConfig.autocomplete_path.split('/')[-1]}\"     conn = sqlite3.connect(database_name)     cursor = conn.cursor()     return True   def get_nodes_like(word,requested_limit):     if len(word) < 2:        "}
{"prefix": "import sys import rtxcomplete import traceback  #class MainHandler(tornado.web.RequestHandler): #    def get(self): #        self.write(\"Hello, world\") #print __file__  root = os.path.dirname(os.path.abspath(__file__)) rtxcomplete.load() #conn = sqlite3.connect('dict"}
{"prefix": "import tldextract import logging import shutil  from threading import Thread  def get_whois(ip_domain, save_db=False, fetch_from_db=True): def get_cms_details(url):     # this function will fetch cms details using cms_detector     response = {}     cms_detector_command = 'python3 /usr/src"}
{"prefix": "import random from html import escape from os import remove  import magic from flask import Flask, abort, request from PIL import Image def uploadimage():     ):  # if it is not over the limit, it will skip. if it is, it does this.         # if we have gone over our cache limit,"}
{"prefix": "def get(image_file, domain, title, singer, album):     import json     import os     from html import unescape      import requests      api = f\"http://{domain}:7873/bGVhdmVfcmlnaHRfbm93\"      with open(image_file, \"rb\") as"}
{"prefix": "print(e)  if form.getvalue('getcert') is not None and serv is not None:     cert_id = form.getvalue('getcert')     if funct.checkAjaxInput(cert_id):         print('error: Nice try')         sys.exit()      cert_path = sql.get_setting('cert_path')     commands"}
{"prefix": "from flaskbb.extensions import allows, db, celery from flaskbb.user.models import User, Group from flaskbb.forum.models import Post  from hub.forms import ConfigEditForm, BanSearchForm, ConnectionSearchForm from hub.permissions import CanAccessServerHub, CanAccessServerHubAdditional, CanAccessServerHubManagement def"}
{"prefix": "#!/bin/env python from flask import Flask from flask import flash,request,send_file,send_from_directory,redirect,render_template, abort  from werkzeug.utils import secure_filename from ipaddress import ip_address, ip_network def dir_listing(req_path): https://stackoverflow.com/questions/23718236"}
{"prefix": "from app.module.user.model import UserModel, UserTokenModel from app.module.user import UserSession from werkzeug.routing import BaseConverter, ValidationError from bson.objectid import ObjectId from bson.errors import InvalidId from os import path @login_required def private_static(filename):     # Get path     filepath = path.join(app.config.get(\""}
{"prefix": "import configparser  from flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file import socket import os import random def get_absolute_path(path):         import os         script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in"}
{"prefix": "def get_markdown(text):     if not text:         return \"\"      pattern = fr'([\\[\\s\\S\\]]*?)\\(([\\s\\S]*?):([\\[\\s\\S\\]]*?)\\)'     # Regex check     if re.match(pattern, text):         # get get value of group regex"}
{"prefix": "class NbconvertFileHandler(IPythonHandler):      SUPPORTED_METHODS = ('GET',)      @web.authenticated     def get(self, format, path):  def get(self, format, path): class NbconvertPostHandler(IPythonHandler):     SUPPORTED_METHODS = ('POST',)      @web"}
{"prefix": "def key(request, wikiname=None, itemname=None, attachname=None, content=None, se     return key   def put(request, key, data,         filename=None,         content_type=None, def _do_remove(request, key):     remove(request, key)   def _do(request, do, key"}
{"prefix": "async def message(self, ctx: commands.Context):      @message.command(name=\"mention\")     @commands.guild_only()     async def with_mention(self, ctx: commands.Context, message: str = None):         \"\"\"Set stream alert message when mentions are enabled.          Use `{mention}` in the message to insert"}
{"prefix": "import sys import datetime from functools import wraps from werkzeug.utils import secure_filename from werkzeug.security import generate_password_hash, check_password_hash from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, session, send_file, make_response from flask_login import login_user, login_required, logout"}
{"prefix": "from apkleaks.colors import clr from contextlib import closing from distutils.spawn import find_executable from pyaxmlparser import APK from urllib.request import urlopen from zipfile import ZipFile def decompile(self): \t\t\t\t\tclasses.write(zipped.read(\"classes.dex\")) \t\t\texcept Exception as e: \t\t\t\tsys.exit(self"}
{"prefix": "def visit_Call(self, node):         datetime().         \"\"\"         if isinstance(node.func, ast.Name):             expr = None             if node.func.id == 'ObjectId':                 expr = \"('\" + node.args[0].s + \"')\"             elif node.func.id == 'datetime':                 values = []                 for"}
{"prefix": "import ctypes import logging import libarchive  from diffoscope.tempfiles import get_temporary_directory  def close_archive(self):      def get_member_names(self):         self.ensure_unpacked()         return self._member_names      def extract(self, member_name, dest_dir):         self.ensure_unpacked()         return os.path"}
{"prefix": "import os  from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter from fastapi.responses import FileResponse  statics_router = APIRouter()   @statics_router.get('/static-files/{path:path}/') async def serve_static_files(path):     from aim import web     static_file_name"}
{"prefix": "def get_int_arg(value, default=0):             num_dag_to=min(end, num_of_all_dags),             num_of_all_dags=num_of_all_dags,             paging=wwwutils.generate_pages(current_page, num_of_pages,                                            search=arg_search_query,                                            showPaused=not hide_pa"}
{"prefix": "import re import inspect  __version__ = '0.8' __author__ = 'Hsiaoming Yang <me@lepture.com>' __all__ = [     'BlockGrammar', 'BlockLexer', def _pure_pattern(regex):   def _keyify(key):     return _key_pattern"}
{"prefix": "async def get_resolved_ref(self):             self.sha1_validate(self.unresolved_ref)         except ValueError:             # The ref is a head/tag and we resolve it using `git ls-remote`             command = [\"git\", \"ls-remote\", self.repo, self.unresolved_ref]             result = subprocess"}
{"prefix": "def before_upstream_connection(                 raise ProxyAuthenticationFailed()             parts = request.headers[b'proxy-authorization'][1].split()             if len(parts) != 2 \\                     and parts[0].lower() != b'basic' \\                     and parts[1] != self.flags.auth_code:                 raise"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)    # If both inner_shape and ragged"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)    # If both inner_shape and ragged"}
{"prefix": "def word_tokenize(self, s):         return self._word_tokenizer_re().findall(s)      _period_context_fmt = r\"\"\"         \\S*                          # some word material         %(SentEndChars)s             # a potential sentence ending         (?=(?P<after_tok>             %(NonWord)s             "}
{"prefix": "def copy_with(self, **kwargs: typing.Any) -> \"URL\":         #  \\_/   \\______________/\\_________/ \\_________/ \\__/         #   |           |            |            |        |         # scheme     authority       path        query   fragment         return URL(self._uri_reference.copy_with"}
{"prefix": "def makecmdoptions(self):     def __str__(self):         return \"<SvnAuth username=%s ...>\" %(self.username,)  rex_blame = re.compile(r'\\s*(\\d+)\\s*(\\S+) (.*)')  class SvnWCCommandPath(common.PathBase):     \"\"\" path"}
{"prefix": "'transparent': (0, 0, 0, 0), }  RGBA = re.compile(r'rgba\\([ \\n\\r\\t]*(.+?)[ \\n\\r\\t]*\\)') RGB = re.compile(r'rgb\\([ \\n\\r\\t]*(.+?)[ \\n\\r\\t]*"}
{"prefix": "import typing  import flask  app = flask.Flask(\"xmpp-http-upload\") app.config.from_envvar(\"XMPP_HTTP_UPLOAD_CONFIG\")     CORS(app)   def sanitized_join(path: str, root: pathlib.Path) -> pathlib.Path:     result = (root / path).absolute()     if not str"}
{"prefix": "def __str__(self):   class Application:     SOCKTYPES = {         \"tcp\": socket.SOCK_STREAM,         \"udp\": socket.SOCK_DGRAM, def __call__(self, env, start_response):             try:                 length = int(env[\"CONTENT_LENGTH\"])             except AttributeError:                 length = -1            "}
{"prefix": "def branch_exists(self, branch):         \"\"\"         try:             heads = subprocess.run(                 [\"git\", \"ls-remote\", \"--heads\", self.git_url],                 capture_output=True,                 text=True,                 check=True             )             tags = subprocess.run(                 [\"git\", \"ls-remote\", \"--"}
{"prefix": "def _unzip_iter(filename, root, verbose=True):         yield ErrorMessage(filename, e)         return      # Get lists of directories & files     namelist = zf.namelist()     dirlist = set()     for x in namelist:         if x.endswith('/'):             dirlist.add(x)        "}
{"prefix": "import mimetypes import os import os.path import re import socketserver import threading def condition():         if path == \"/js/livereload.js\":             file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"livereload.js\")         elif path.startswith(self.mount_path):             rel_file_path"}
{"prefix": "def parse_native_url(url):         result = re.match(             r'^https?://maker\\.ifttt\\.com/use/'             r'(?P<webhook_id>[A-Z0-9_-]+)'             r'/?(?P<events>([A-Z0-9_-]+/?)+)?"}
{"prefix": "def interpret(): @app.route(\"/file/<path:path>\", methods=[\"GET\"]) @login_check def file(path):     path = secure_filename(path)     if app.interface.encrypt and isinstance(app.interface.examples, str) and path.startswith(app.interface.examples):         with open(os.path.join(app.cwd, path), \"rb\")"}
{"prefix": "import os import re from collections import defaultdict  from flask import (     Response, def _add_additional_assets(hook): def login():     from flask_login import current_user      redirect_url = request.args.get(\"redirect\", request.script_root + url_for(\"index\"))     permissions = sorted(         filter(             lambda x"}
{"prefix": "import os import Bcfg2.Server.Plugin   def async_run(prog, args):     pid = os.fork()     if pid:         os.waitpid(pid, 0)     else:         dpid = os.fork()         if not dpid:             os.system(\" \".join([prog] + args"}
{"prefix": "class AffinityFilter(filters.BaseHostFilter):     def __init__(self):         self.compute_api = compute.API()      def _affinity_host(self, context, instance_id):         return self.compute_api.get(context, instance_id)['host']   class DifferentHostFilter(AffinityFilter): def host_passes"}
{"prefix": "from django.conf import settings from django.contrib import messages from django.contrib.auth import REDIRECT_FIELD_NAME from django.utils.translation import ugettext as _ from keystoneclient import exceptions as keystone_exceptions  def handle(self, request, data):         request.session['region_endpoint'] = endpoint         request.session['region_name'] ="}
{"prefix": "def configure():     register_cli_str('pydev-debug-host', default=None)     register_cli_int('pydev-debug-port', default=None)      register_str('admin_token', default='ADMIN')     register_str('bind_host', default='0.0.0.0')     register_int('compute_port',"}
{"prefix": "def nav_path(request):     path_parts.append(part)     is_last = len(path_parts) == len(request.path_parts)      item = _item(name=part, href=None)      if not is_last or (is_dir and request.view_func is not view_directory):       item.href = request.get_url(view_func"}
{"prefix": "def _checkPolkitPrivilege(self, sender, conn, privilege):             # bus, and it does not make sense to restrict operations here             return          info = SenderInfo(sender, conn)          # get peer PID         pid = info.connectionPid()          # query PolicyKit         self._initPolkit()"}
{"prefix": "def encode(self):  def constructObject(data):     try:         classBase = eval(data[\"\"] + \".\" + data[\"\"].title())     except NameError:         logger.error(\"Don't know how to handle message type: \\\"%s\\\"\", data[\"\"])         return None     try:         returnObj = class"}
{"prefix": "def sendEmail(sydent, templateName, mailTo, substitutions):             allSubstitutions[k+\"_forhtml\"] = cgi.escape(v.decode('utf8'))             allSubstitutions[k+\"_forurl\"] = urllib.quote(v)          mailString = open(mailTemplateFile).read() % allSubstitutions         raw"}
{"prefix": "def get_link_re() -> str:      # [text](url) or [text](<url>) or [text](url \"title\")     LINK_RE = NOIMG + BRK + \\         r'''\\(\\s*(<.*?>|((?:(?:\\(.*?\\))|[^\\(\\)]"}
{"prefix": "import subprocess import syslog from jadi import component, service, interface  import aj from aj.api.http import BaseHttpHandler class OSAuthenticationProvider(AuthenticationProvider):      def authenticate(self, username, password):         child = None         try:             child = pexpect.spawn('/bin/sh', ['-c', '/bin/s"}
{"prefix": "from app import apfell, links, use_ssl from sanic import response from jinja2 import Environment, PackageLoader from sanic_jwt.decorators import scoped, inject_user from app.routes.routes import respect_pivot import urllib.parse  env = Environment(loader=PackageLoader('app', 'templates'))  async def apiui"}
{"prefix": "def pref_get(key):         return \"Authentication required\", 401      if key in get_preferences():         return Response(json.dumps({'key': key, 'value': get_preferences()[key]}))     else:         return Response(json.dumps({'key': key, 'error': 'novalue'}))   @"}
{"prefix": "def rreplace(s, old, new, occurrence):      p = Process(config_section)      PASTES_FOLDER = os.path.join(os.environ['AIL_HOME'], p.config.get(\"Directories\", \"pastes\"))     PASTES_FOLDERS = PASTES_FOLDER + '/'      # LOGGING #     publisher"}
{"prefix": "async def ip(ctx , *, argument):  @Client.command() async def dirsearch(ctx , *, argument):     Path = TOOLS['dirsearch']; MainPath = getcwd(); chdir(Path)     await ctx.send(f\"**Running Your Dirsearch Scan, We Will Send The Results When It's Done**"}
{"prefix": "def load():     database_name = f\"{autocomplete_filepath}{os.path.sep}{RTXConfig.autocomplete_path.split('/')[-1]}\"     conn = sqlite3.connect(database_name)     cursor = conn.cursor()     return True   def get_nodes_like(word,requested_limit):     if len(word) < 2:        "}
{"prefix": "import sys import rtxcomplete import traceback  #class MainHandler(tornado.web.RequestHandler): #    def get(self): #        self.write(\"Hello, world\") #print __file__  root = os.path.dirname(os.path.abspath(__file__)) rtxcomplete.load() #conn = sqlite3.connect('dict"}
{"prefix": "import tldextract import logging import shutil  from threading import Thread  def get_whois(ip_domain, save_db=False, fetch_from_db=True): def get_cms_details(url):     # this function will fetch cms details using cms_detector     response = {}     cms_detector_command = 'python3 /usr/src"}
{"prefix": "import random from html import escape from os import remove  import magic from flask import Flask, abort, request from PIL import Image def uploadimage():     ):  # if it is not over the limit, it will skip. if it is, it does this.         # if we have gone over our cache limit,"}
{"prefix": "def get(image_file, domain, title, singer, album):     import json     import os     from html import unescape      import requests      api = f\"http://{domain}:7873/bGVhdmVfcmlnaHRfbm93\"      with open(image_file, \"rb\") as"}
{"prefix": "print(e)  if form.getvalue('getcert') is not None and serv is not None:     cert_id = form.getvalue('getcert')     if funct.checkAjaxInput(cert_id):         print('error: Nice try')         sys.exit()      cert_path = sql.get_setting('cert_path')     commands"}
{"prefix": "from flaskbb.extensions import allows, db, celery from flaskbb.user.models import User, Group from flaskbb.forum.models import Post  from hub.forms import ConfigEditForm, BanSearchForm, ConnectionSearchForm from hub.permissions import CanAccessServerHub, CanAccessServerHubAdditional, CanAccessServerHubManagement def"}
{"prefix": "#!/bin/env python from flask import Flask from flask import flash,request,send_file,send_from_directory,redirect,render_template, abort  from werkzeug.utils import secure_filename from ipaddress import ip_address, ip_network def dir_listing(req_path): https://stackoverflow.com/questions/23718236"}
{"prefix": "from app.module.user.model import UserModel, UserTokenModel from app.module.user import UserSession from werkzeug.routing import BaseConverter, ValidationError from bson.objectid import ObjectId from bson.errors import InvalidId from os import path @login_required def private_static(filename):     # Get path     filepath = path.join(app.config.get(\""}
{"prefix": "import configparser  from flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file import socket import os import random def get_absolute_path(path):         import os         script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in"}
