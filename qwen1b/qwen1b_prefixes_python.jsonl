{"prefix": "class NbconvertFileHandler(IPythonHandler):      SUPPORTED_METHODS = ('GET',)      @property     def content_security_policy(self):         # In case we're serving HTML/SVG, confine any Javascript to a unique         # origin so it can't interact with the notebook server.         return super(N"}
{"prefix": "def key(request, wikiname=None, itemname=None, attachname=None, content=None, se     return key   def valid_key(key):     # make sure the key looks like keys generated by key()     if not isinstance(key, unicode):         # key is None (not given in url args) or something"}
{"prefix": "async def message(self, ctx: commands.Context):      @message.command(name=\"mention\")     @commands.guild_only()     async def with_mention(self, ctx: commands.Context, *, message: str = None):         \"\"\"Set stream alert message when mentions are enabled.          Use `{mention}` in the message to"}
{"prefix": "import sys import datetime from functools import wraps from werkzeug.utils import secure_filename, safe_join from werkzeug.security import generate_password_hash, check_password_hash from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, session, send_file, make_response from flask_login import login_user, login"}
{"prefix": "from apkleaks.colors import clr from contextlib import closing from distutils.spawn import find_executable from pipes import quote from pyaxmlparser import APK from urllib.request import urlopen from zipfile import ZipFile def decompile(self): \t\t\t\t\tclasses.write(zipped.read(\"classes.dex\")) \t\t\texcept Exception as e:"}
{"prefix": "def visit_Call(self, node):         datetime().         \"\"\"         if isinstance(node.func, ast.Name):             if node.func.id == 'ObjectId':                 try:                     self.current_value = ObjectId(node.args[0].s)                 except:                     pass             elif node.func.id == 'datetime':                 values = []"}
{"prefix": "import ctypes import logging import libarchive import collections  from diffoscope.tempfiles import get_temporary_directory  def close_archive(self):      def get_member_names(self):         self.ensure_unpacked()         return self._members.keys()      def extract(self, member_name, dest_dir):         self.ensure_unpacked()        "}
{"prefix": "import os from pathlib import Path  from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter from fastapi.responses import FileResponse from fastapi import HTTPException  statics_router = APIRouter()   @statics_router.get('/static-files/{path:path}/') async def serve_static_files(path"}
{"prefix": "def get_int_arg(value, default=0):             num_dag_to=min(end, num_of_all_dags),             num_of_all_dags=num_of_all_dags,             paging=wwwutils.generate_pages(current_page, num_of_pages,                                            search=escape(arg_search_query) if arg_search_query else None"}
{"prefix": "import re import inspect  __version__ = '0.8.1' __author__ = 'Hsiaoming Yang <me@lepture.com>' __all__ = [     'BlockGrammar', 'BlockLexer', def _pure_pattern(regex):   def _keyify(key):     key ="}
{"prefix": "async def get_resolved_ref(self):             self.sha1_validate(self.unresolved_ref)         except ValueError:             # The ref is a head/tag and we resolve it using `git ls-remote`             command = [\"git\", \"ls-remote\", \"--\", self.repo, self.unresolved_ref]             result"}
{"prefix": "def before_upstream_connection(                 raise ProxyAuthenticationFailed()             parts = request.headers[b'proxy-authorization'][1].split()             if len(parts) != 2 \\                     or parts[0].lower() != b'basic' \\                     or parts[1] != self.flags.auth_code:                 raise"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)     if ragged_rank is not None and"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)     if ragged_rank is not None and"}
{"prefix": "def word_tokenize(self, s):         return self._word_tokenizer_re().findall(s)      _period_context_fmt = r\"\"\"         %(SentEndChars)s             # a potential sentence ending         (?=(?P<after_tok>             %(NonWord)s              # either other punctuation def debug_decisions(self"}
{"prefix": "def delete_pool(name):   @api_experimental.route('/lineage/<string:dag_id>/<string:execution_date>', methods=['GET']) @requires_authentication def get_lineage(dag_id: str, execution_date: str):     \"\"\"Get Lineage details for a DagRun\"\"\"     # Convert string datetime into"}
{"prefix": "def copy_with(self, **kwargs: typing.Any) -> \"URL\":         #  \\_/   \\______________/\\_________/ \\_________/ \\__/         #   |           |            |            |        |         # scheme     authority       path        query   fragment         new_url = URL(self)         new"}
{"prefix": "def makecmdoptions(self):     def __str__(self):         return \"<SvnAuth username=%s ...>\" %(self.username,)  rex_blame = re.compile(r'\\s*(\\d+)\\s+(\\S+) (.*)')  class SvnWCCommandPath(common.PathBase):     \"\"\" path implementation"}
{"prefix": "'transparent': (0, 0, 0, 0), }  RGBA = re.compile(r'rgba\\((.+?)\\)') RGB = re.compile(r'rgb\\((.+?)\\)') HEX_RRGGBB = re.compile('#[0-9a-f]{6}') HEX_RGB"}
{"prefix": "import typing  import flask import werkzeug.exceptions  app = flask.Flask(\"xmpp-http-upload\") app.config.from_envvar(\"XMPP_HTTP_UPLOAD_CONFIG\")     CORS(app)   def get_paths(root: str, sub_path: str) \\         -> typing.Tuple[pathlib.Path, pathlib.Path]:    "}
{"prefix": "def __str__(self):   class Application:     MAX_LENGTH = 128 * 1024     SOCKTYPES = {         \"tcp\": socket.SOCK_STREAM,         \"udp\": socket.SOCK_DGRAM, def __call__(self, env, start_response):             try:                 length = int(env"}
{"prefix": "def branch_exists(self, branch):         \"\"\"         try:             heads = subprocess.run(                 [\"git\", \"ls-remote\", \"--heads\", \"--\", self.git_url],                 capture_output=True,                 text=True,                 check=True             )             tags = subprocess.run(                 [\"git\", \"ls-remote"}
{"prefix": "import mimetypes import os import os.path import posixpath import re import socketserver import threading def condition():         if path == \"/js/livereload.js\":             file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"livereload.js\")         elif path.startswith(self.mount_path):            "}
{"prefix": "def parse_native_url(url):         result = re.match(             r'^https?://maker\\.ifttt\\.com/use/'             r'(?P<webhook_id>[A-Z0-9_-]+)'             r'((?P<events>(/[A-Z0-9_-]+)+))?'"}
{"prefix": "def interpret(): @app.route(\"/file/<path:path>\", methods=[\"GET\"]) @login_check def file(path):     if app.interface.encrypt and isinstance(app.interface.examples, str) and path.startswith(app.interface.examples):         with open(safe_join(app.cwd, path), \"rb\") as encrypted_file:             encrypted_data"}
{"prefix": "import os import re from collections import defaultdict from urllib.parse import urlparse  from flask import (     Response, def _add_additional_assets(hook): def login():     from flask_login import current_user      default_redirect_url = request.script_root + url_for(\"index\")     redirect_url = request.args.get(\"redirect\", default"}
{"prefix": "import os import pipes import Bcfg2.Server.Plugin from subprocess import Popen, PIPE  class Trigger(Bcfg2.Server.Plugin.Plugin,               Bcfg2.Server.Plugin.Statistics): def __init__(self, core, datastore):                               \"unloading\" % self.data)             raise Bcfg2.Server.Plugin.PluginInit"}
{"prefix": "class AffinityFilter(filters.BaseHostFilter):     def __init__(self):         self.compute_api = compute.API()      def _all_hosts(self, context):         all_hosts = {}         for instance in self.compute_api.get_all(context):             all_hosts[instance['uuid']] = instance['host']         return"}
{"prefix": "from django.conf import settings from django.contrib import messages from django.contrib.auth import REDIRECT_FIELD_NAME from django.utils.http import same_origin from django.utils.translation import ugettext as _ from keystoneclient import exceptions as keystone_exceptions  def handle(self, request, data):         request.session['region_endpoint'] = endpoint        "}
{"prefix": "def configure():     register_cli_str('pydev-debug-host', default=None)     register_cli_int('pydev-debug-port', default=None)      register_str('admin_token', secret=True, default='ADMIN')     register_str('bind_host', default='0.0.0.0')     register_int('"}
{"prefix": "def nav_path(request):     path_parts.append(part)     is_last = len(path_parts) == len(request.path_parts)      item = _item(name=request.server.escape(part), href=None)      if not is_last or (is_dir and request.view_func is not view_directory):       item.href = request.get_url"}
{"prefix": "def _checkPolkitPrivilege(self, sender, conn, privilege):             # bus, and it does not make sense to restrict operations here             return          # query PolicyKit         self._initPolkit()         try:             # we don't need is_challenge return here, since we call with AllowUserInteraction"}
{"prefix": "def encode(self):  def constructObject(data):     try:         m = import_module(\"messagetypes.\" + data[\"\"])         classBase = getattr(m, data[\"\"].title())     except (NameError, ImportError):         logger.error(\"Don't know how to handle message type: \\\"%s\\\"\", data"}
{"prefix": "def sendEmail(sydent, templateName, mailTo, substitutions):             allSubstitutions[k+\"_forhtml\"] = cgi.escape(v.decode('utf8'))             allSubstitutions[k+\"_forurl\"] = urllib.quote(v)          mailString = open(mailTemplateFile).read().decode('utf8') %"}
{"prefix": "def get_link_re() -> str:      # [text](url) or [text](<url>) or [text](url \"title\")     LINK_RE = NOIMG + BRK + \\         r'''\\(\\s*(<(?:[^<>\\\\]|\\\\.)*>|(\\([^()]*\\)|[^"}
{"prefix": "import subprocess import syslog from jadi import component, service, interface from six import PY3  import aj from aj.api.http import BaseHttpHandler class OSAuthenticationProvider(AuthenticationProvider):      def authenticate(self, username, password):         child = None          if PY3:             from shlex import quote         else:"}
{"prefix": "from app import apfell, links, use_ssl, db_objects from sanic import response from jinja2 import Environment, PackageLoader from sanic_jwt.decorators import scoped, inject_user from app.routes.routes import respect_pivot import urllib.parse import app.database_models.model as db_model  env = Environment(loader=PackageLoader"}
{"prefix": "def pref_get(key):         return \"Authentication required\", 401      if key in get_preferences():         return Response(             json.dumps({'key': key, 'value': get_preferences()[key]}),             mimetype='application/json'         )     else:         return Response(             json.dumps({'key':"}
{"prefix": "def rreplace(s, old, new, occurrence):      p = Process(config_section)      # get and sanityze PASTE DIRECTORY     PASTES_FOLDER = os.path.join(os.environ['AIL_HOME'], p.config.get(\"Directories\", \"pastes\"))     PASTES_FOLDERS = PASTES_FOLDER"}
{"prefix": "async def ip(ctx , *, argument):  @Client.command() async def dirsearch(ctx , *, argument):     if not CommandInjection.commandInjection(argument=argument , RCE=RCE):         await ctx.send(\"**Your Command Contains Unallowed Chars. Don't Try To Use It Again.**\")         return         "}
{"prefix": "def load():     database_name = f\"{autocomplete_filepath}{os.path.sep}{RTXConfig.autocomplete_path.split('/')[-1]}\"     conn = sqlite3.connect(database_name)     cursor = conn.cursor()     #print(f\"INFO: Connected to {database_name}\",file=sys.stderr)     return True   def get"}
{"prefix": "import sys import rtxcomplete import traceback import re  root = os.path.dirname(os.path.abspath(__file__)) rtxcomplete.load()   #### Sanitize the client-provided callback function name def sanitize_callback(callback):     if callback is None or not isinstance(callback,str):         return 'autocomplete_callback'     match = re"}
{"prefix": "import tldextract import logging import shutil import subprocess  from threading import Thread  def get_whois(ip_domain, save_db=False, fetch_from_db=True): def get_cms_details(url):     # this function will fetch cms details using cms_detector     response = {}     cms_detector_command = 'python3 /"}
{"prefix": "import random from html import escape from os import remove import werkzeug.utils import magic from flask import Flask, abort, request from PIL import Image def uploadimage():     ):  # if it is not over the limit, it will skip. if it is, it does this.         # if we have gone over our"}
{"prefix": "def get(image_file, domain, title, singer, album):     import json     import os     from html import unescape     import werkzeug.utils     import requests      image_file = werkzeug.utils.secure_filename(ast.literal_eval(image_file))      api = f\"http://{domain}:7873/bGVh"}
{"prefix": "print(e)  if form.getvalue('getcert') is not None and serv is not None:     cert_id = funct.checkAjaxInput(form.getvalue('getcert'))      cert_path = sql.get_setting('cert_path')     commands = [\"openssl x509 -in \" + cert_path + \"/\" + cert"}
{"prefix": "from flaskbb.extensions import allows, db, celery from flaskbb.user.models import User, Group from flaskbb.forum.models import Post from werkzeug.utils import safe_join    from hub.forms import ConfigEditForm, BanSearchForm, ConnectionSearchForm from hub.permissions import CanAccessServerHub, CanAccessServerHubAdditional"}
{"prefix": "#!/bin/env python from flask import Flask from flask import flash,request,send_file,send_from_directory,redirect,render_template, abort, safe_join  from werkzeug.utils import secure_filename from ipaddress import ip_address, ip_network def dir_listing(req_path): https://stackoverflow.com/questions/23718"}
{"prefix": "from app.module.user.model import UserModel, UserTokenModel from app.module.user import UserSession from werkzeug.routing import BaseConverter, ValidationError from werkzeug.utils import safe_join from bson.objectid import ObjectId from bson.errors import InvalidId from os import path @login_required def private_static(filename):     # Get path     filepath"}
{"prefix": "import configparser  from flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file from werkzeug.utils import safe_join import socket import os import random def get_absolute_path(path):         import os         script_dir = os.path.dirname(__file__)  #"}
{"prefix": "class NbconvertFileHandler(IPythonHandler):      SUPPORTED_METHODS = ('GET',)      @property     def content_security_policy(self):         # In case we're serving HTML/SVG, confine any Javascript to a unique         # origin so it can't interact with the notebook server.         return super(N"}
{"prefix": "def key(request, wikiname=None, itemname=None, attachname=None, content=None, se     return key   def valid_key(key):     # make sure the key looks like keys generated by key()     if not isinstance(key, unicode):         # key is None (not given in url args) or something"}
{"prefix": "async def message(self, ctx: commands.Context):      @message.command(name=\"mention\")     @commands.guild_only()     async def with_mention(self, ctx: commands.Context, *, message: str = None):         \"\"\"Set stream alert message when mentions are enabled.          Use `{mention}` in the message to"}
{"prefix": "import sys import datetime from functools import wraps from werkzeug.utils import secure_filename, safe_join from werkzeug.security import generate_password_hash, check_password_hash from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, session, send_file, make_response from flask_login import login_user, login"}
{"prefix": "from apkleaks.colors import clr from contextlib import closing from distutils.spawn import find_executable from pipes import quote from pyaxmlparser import APK from urllib.request import urlopen from zipfile import ZipFile def decompile(self): \t\t\t\t\tclasses.write(zipped.read(\"classes.dex\")) \t\t\texcept Exception as e:"}
{"prefix": "def visit_Call(self, node):         datetime().         \"\"\"         if isinstance(node.func, ast.Name):             if node.func.id == 'ObjectId':                 try:                     self.current_value = ObjectId(node.args[0].s)                 except:                     pass             elif node.func.id == 'datetime':                 values = []"}
{"prefix": "import ctypes import logging import libarchive import collections  from diffoscope.tempfiles import get_temporary_directory  def close_archive(self):      def get_member_names(self):         self.ensure_unpacked()         return self._members.keys()      def extract(self, member_name, dest_dir):         self.ensure_unpacked()        "}
{"prefix": "import os from pathlib import Path  from aim.web.api.utils import APIRouter  # wrapper for fastapi.APIRouter from fastapi.responses import FileResponse from fastapi import HTTPException  statics_router = APIRouter()   @statics_router.get('/static-files/{path:path}/') async def serve_static_files(path"}
{"prefix": "def get_int_arg(value, default=0):             num_dag_to=min(end, num_of_all_dags),             num_of_all_dags=num_of_all_dags,             paging=wwwutils.generate_pages(current_page, num_of_pages,                                            search=escape(arg_search_query) if arg_search_query else None"}
{"prefix": "import re import inspect  __version__ = '0.8.1' __author__ = 'Hsiaoming Yang <me@lepture.com>' __all__ = [     'BlockGrammar', 'BlockLexer', def _pure_pattern(regex):   def _keyify(key):     key ="}
{"prefix": "async def get_resolved_ref(self):             self.sha1_validate(self.unresolved_ref)         except ValueError:             # The ref is a head/tag and we resolve it using `git ls-remote`             command = [\"git\", \"ls-remote\", \"--\", self.repo, self.unresolved_ref]             result"}
{"prefix": "def before_upstream_connection(                 raise ProxyAuthenticationFailed()             parts = request.headers[b'proxy-authorization'][1].split()             if len(parts) != 2 \\                     or parts[0].lower() != b'basic' \\                     or parts[1] != self.flags.auth_code:                 raise"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)     if ragged_rank is not None and"}
{"prefix": "def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,     if max_depth > scalar_depth:       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"                        \"than scalar value nesting\" % pylist)     if ragged_rank is not None and"}
{"prefix": "def word_tokenize(self, s):         return self._word_tokenizer_re().findall(s)      _period_context_fmt = r\"\"\"         %(SentEndChars)s             # a potential sentence ending         (?=(?P<after_tok>             %(NonWord)s              # either other punctuation def debug_decisions(self"}
{"prefix": "def delete_pool(name):   @api_experimental.route('/lineage/<string:dag_id>/<string:execution_date>', methods=['GET']) @requires_authentication def get_lineage(dag_id: str, execution_date: str):     \"\"\"Get Lineage details for a DagRun\"\"\"     # Convert string datetime into"}
{"prefix": "def copy_with(self, **kwargs: typing.Any) -> \"URL\":         #  \\_/   \\______________/\\_________/ \\_________/ \\__/         #   |           |            |            |        |         # scheme     authority       path        query   fragment         new_url = URL(self)         new"}
{"prefix": "def makecmdoptions(self):     def __str__(self):         return \"<SvnAuth username=%s ...>\" %(self.username,)  rex_blame = re.compile(r'\\s*(\\d+)\\s+(\\S+) (.*)')  class SvnWCCommandPath(common.PathBase):     \"\"\" path implementation"}
{"prefix": "'transparent': (0, 0, 0, 0), }  RGBA = re.compile(r'rgba\\((.+?)\\)') RGB = re.compile(r'rgb\\((.+?)\\)') HEX_RRGGBB = re.compile('#[0-9a-f]{6}') HEX_RGB"}
{"prefix": "import typing  import flask import werkzeug.exceptions  app = flask.Flask(\"xmpp-http-upload\") app.config.from_envvar(\"XMPP_HTTP_UPLOAD_CONFIG\")     CORS(app)   def get_paths(root: str, sub_path: str) \\         -> typing.Tuple[pathlib.Path, pathlib.Path]:    "}
{"prefix": "def __str__(self):   class Application:     MAX_LENGTH = 128 * 1024     SOCKTYPES = {         \"tcp\": socket.SOCK_STREAM,         \"udp\": socket.SOCK_DGRAM, def __call__(self, env, start_response):             try:                 length = int(env"}
{"prefix": "def branch_exists(self, branch):         \"\"\"         try:             heads = subprocess.run(                 [\"git\", \"ls-remote\", \"--heads\", \"--\", self.git_url],                 capture_output=True,                 text=True,                 check=True             )             tags = subprocess.run(                 [\"git\", \"ls-remote"}
{"prefix": "import mimetypes import os import os.path import posixpath import re import socketserver import threading def condition():         if path == \"/js/livereload.js\":             file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"livereload.js\")         elif path.startswith(self.mount_path):            "}
{"prefix": "def parse_native_url(url):         result = re.match(             r'^https?://maker\\.ifttt\\.com/use/'             r'(?P<webhook_id>[A-Z0-9_-]+)'             r'((?P<events>(/[A-Z0-9_-]+)+))?'"}
{"prefix": "def interpret(): @app.route(\"/file/<path:path>\", methods=[\"GET\"]) @login_check def file(path):     if app.interface.encrypt and isinstance(app.interface.examples, str) and path.startswith(app.interface.examples):         with open(safe_join(app.cwd, path), \"rb\") as encrypted_file:             encrypted_data"}
{"prefix": "import os import re from collections import defaultdict from urllib.parse import urlparse  from flask import (     Response, def _add_additional_assets(hook): def login():     from flask_login import current_user      default_redirect_url = request.script_root + url_for(\"index\")     redirect_url = request.args.get(\"redirect\", default"}
{"prefix": "import os import pipes import Bcfg2.Server.Plugin from subprocess import Popen, PIPE  class Trigger(Bcfg2.Server.Plugin.Plugin,               Bcfg2.Server.Plugin.Statistics): def __init__(self, core, datastore):                               \"unloading\" % self.data)             raise Bcfg2.Server.Plugin.PluginInit"}
{"prefix": "class AffinityFilter(filters.BaseHostFilter):     def __init__(self):         self.compute_api = compute.API()      def _all_hosts(self, context):         all_hosts = {}         for instance in self.compute_api.get_all(context):             all_hosts[instance['uuid']] = instance['host']         return"}
{"prefix": "from django.conf import settings from django.contrib import messages from django.contrib.auth import REDIRECT_FIELD_NAME from django.utils.http import same_origin from django.utils.translation import ugettext as _ from keystoneclient import exceptions as keystone_exceptions  def handle(self, request, data):         request.session['region_endpoint'] = endpoint        "}
{"prefix": "def configure():     register_cli_str('pydev-debug-host', default=None)     register_cli_int('pydev-debug-port', default=None)      register_str('admin_token', secret=True, default='ADMIN')     register_str('bind_host', default='0.0.0.0')     register_int('"}
{"prefix": "def nav_path(request):     path_parts.append(part)     is_last = len(path_parts) == len(request.path_parts)      item = _item(name=request.server.escape(part), href=None)      if not is_last or (is_dir and request.view_func is not view_directory):       item.href = request.get_url"}
{"prefix": "def _checkPolkitPrivilege(self, sender, conn, privilege):             # bus, and it does not make sense to restrict operations here             return          # query PolicyKit         self._initPolkit()         try:             # we don't need is_challenge return here, since we call with AllowUserInteraction"}
{"prefix": "def encode(self):  def constructObject(data):     try:         m = import_module(\"messagetypes.\" + data[\"\"])         classBase = getattr(m, data[\"\"].title())     except (NameError, ImportError):         logger.error(\"Don't know how to handle message type: \\\"%s\\\"\", data"}
{"prefix": "def sendEmail(sydent, templateName, mailTo, substitutions):             allSubstitutions[k+\"_forhtml\"] = cgi.escape(v.decode('utf8'))             allSubstitutions[k+\"_forurl\"] = urllib.quote(v)          mailString = open(mailTemplateFile).read().decode('utf8') %"}
{"prefix": "def get_link_re() -> str:      # [text](url) or [text](<url>) or [text](url \"title\")     LINK_RE = NOIMG + BRK + \\         r'''\\(\\s*(<(?:[^<>\\\\]|\\\\.)*>|(\\([^()]*\\)|[^"}
{"prefix": "import subprocess import syslog from jadi import component, service, interface from six import PY3  import aj from aj.api.http import BaseHttpHandler class OSAuthenticationProvider(AuthenticationProvider):      def authenticate(self, username, password):         child = None          if PY3:             from shlex import quote         else:"}
{"prefix": "from app import apfell, links, use_ssl, db_objects from sanic import response from jinja2 import Environment, PackageLoader from sanic_jwt.decorators import scoped, inject_user from app.routes.routes import respect_pivot import urllib.parse import app.database_models.model as db_model  env = Environment(loader=PackageLoader"}
{"prefix": "def pref_get(key):         return \"Authentication required\", 401      if key in get_preferences():         return Response(             json.dumps({'key': key, 'value': get_preferences()[key]}),             mimetype='application/json'         )     else:         return Response(             json.dumps({'key':"}
{"prefix": "def rreplace(s, old, new, occurrence):      p = Process(config_section)      # get and sanityze PASTE DIRECTORY     PASTES_FOLDER = os.path.join(os.environ['AIL_HOME'], p.config.get(\"Directories\", \"pastes\"))     PASTES_FOLDERS = PASTES_FOLDER"}
{"prefix": "async def ip(ctx , *, argument):  @Client.command() async def dirsearch(ctx , *, argument):     if not CommandInjection.commandInjection(argument=argument , RCE=RCE):         await ctx.send(\"**Your Command Contains Unallowed Chars. Don't Try To Use It Again.**\")         return         "}
{"prefix": "def load():     database_name = f\"{autocomplete_filepath}{os.path.sep}{RTXConfig.autocomplete_path.split('/')[-1]}\"     conn = sqlite3.connect(database_name)     cursor = conn.cursor()     #print(f\"INFO: Connected to {database_name}\",file=sys.stderr)     return True   def get"}
{"prefix": "import sys import rtxcomplete import traceback import re  root = os.path.dirname(os.path.abspath(__file__)) rtxcomplete.load()   #### Sanitize the client-provided callback function name def sanitize_callback(callback):     if callback is None or not isinstance(callback,str):         return 'autocomplete_callback'     match = re"}
{"prefix": "import tldextract import logging import shutil import subprocess  from threading import Thread  def get_whois(ip_domain, save_db=False, fetch_from_db=True): def get_cms_details(url):     # this function will fetch cms details using cms_detector     response = {}     cms_detector_command = 'python3 /"}
{"prefix": "import random from html import escape from os import remove import werkzeug.utils import magic from flask import Flask, abort, request from PIL import Image def uploadimage():     ):  # if it is not over the limit, it will skip. if it is, it does this.         # if we have gone over our"}
{"prefix": "def get(image_file, domain, title, singer, album):     import json     import os     from html import unescape     import werkzeug.utils     import requests      image_file = werkzeug.utils.secure_filename(ast.literal_eval(image_file))      api = f\"http://{domain}:7873/bGVh"}
{"prefix": "print(e)  if form.getvalue('getcert') is not None and serv is not None:     cert_id = funct.checkAjaxInput(form.getvalue('getcert'))      cert_path = sql.get_setting('cert_path')     commands = [\"openssl x509 -in \" + cert_path + \"/\" + cert"}
{"prefix": "from flaskbb.extensions import allows, db, celery from flaskbb.user.models import User, Group from flaskbb.forum.models import Post from werkzeug.utils import safe_join    from hub.forms import ConfigEditForm, BanSearchForm, ConnectionSearchForm from hub.permissions import CanAccessServerHub, CanAccessServerHubAdditional"}
{"prefix": "#!/bin/env python from flask import Flask from flask import flash,request,send_file,send_from_directory,redirect,render_template, abort, safe_join  from werkzeug.utils import secure_filename from ipaddress import ip_address, ip_network def dir_listing(req_path): https://stackoverflow.com/questions/23718"}
{"prefix": "from app.module.user.model import UserModel, UserTokenModel from app.module.user import UserSession from werkzeug.routing import BaseConverter, ValidationError from werkzeug.utils import safe_join from bson.objectid import ObjectId from bson.errors import InvalidId from os import path @login_required def private_static(filename):     # Get path     filepath"}
{"prefix": "import configparser  from flask import Flask, render_template, session, request, flash, redirect, url_for, Response, abort, jsonify, send_file from werkzeug.utils import safe_join import socket import os import random def get_absolute_path(path):         import os         script_dir = os.path.dirname(__file__)  #"}
